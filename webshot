#!/usr/bin/env node

const puppeteer = require('puppeteer');
const program = require('commander');
const fs = require('fs');

global.options = {
	printBackground: true,
	displayHeaderFooter: false,
	margin: {top: 0, bottom: 0, left: 0, right: 0},
}

global.sizes = {
	"desktop": {
		pathSuffix: ' (desktop)',
		width: 1366,
		height: 768
	},
	"mobile": {
		pathSuffix: ' (mobile)',
		width: 375,
		height: 812,
		userAgent: "iPhone"
	},
	"test": {
		pathSuffix: ' (test)',
		width: 375
	}
}

program
	.version('0.1.0')
	.command('webshot [url]', 'capture a URL')
	.option('-s, --size <size>', 'set PDF output size ("mobile" or "desktop" [default])')
	.action(function(url) {
		var size = program.size;

		if (!isValidURL(url)) {
			console.error('Invalid URL "' + url + '". Please paste an entire URL including the "https://".');
			return false;
		}

		if (size == undefined) {
			size = "desktop";
		}
		if (!isValidSize(size)) {
			console.error('Invalid size "' + size + '". Type "webshot --help" for help.');
			return false;
		}

		let filename = url.split("://")[1].replace(/\//g, "-");
		console.log(filename);

		let options = Object.assign(global.options, global.sizes[size]);
		options.path = process.cwd() + "/" + filename + options.pathSuffix + ".pdf";



		console.log("Generating PDF...");
		console.log("Saving to: " + options.path);

		(async() => {
			const browser = await puppeteer.launch({
				executablePath: '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'
			});

			const page = await browser.newPage();

			if (options.userAgent == "iPhone") {
				await page.setUserAgent('Mozilla/5.0 (iPhone; CPU OS 11_0 like Mac OS X) AppleWebKit/604.1.25 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1');
			}

			await page.setViewport({ width: options.width, height: options.height });
			await page.emulateMedia('screen');
			await page.goto(url, {waitUntil: 'networkidle2'});


			let height = await page.evaluate(() => document.body.scrollHeight);
			options.height = height;

			console.log("Dimensions: " + options.width + "x" + options.height);

			options.width = options.width + "px";
			options.height = options.height + "px";

			await page.pdf(options);

			await browser.close();
		})();
	});

program.parse(process.argv);

function isValidURL(url) {
	try {
		new URL(url);
		return true;
	} catch (err) {
		return false;
	}
}

function isValidSize(size) {
	if (global.sizes[size]) {
		return true;
	} else {
		return false;
	}
}
